/*
 * CYME, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef CYME_INSTANCE_H
#define CYME_INSTANCE_H


// wtf, at the tech selection should desapear for a number
#if defined ( __SSE__) ||  (__AVX__)
   #define  __SIMD_VALUE__ sse
#endif

#ifdef _ARCH_QP
   #define  __SIMD_VALUE__ qpx
#endif

    /*
    \brief Construction of the serial exponential, 32-bit precision. Ths single function load/unload 
    a serial number only.
    */
    inline float sexp(float a){
        float res __attribute__((aligned (32)));
        numeric::vec_simd<float, memory::__SIMD_VALUE__, 1> v;
        v.single(a);
        v = exp(v);
        v.single(&res);
        return res; 
    }

    /*
    \brief Construction of the serial logarithm, 32-bit precision. Ths single function load/unload 
    a serial number only.
    */
    inline float slog(float a){
        float res __attribute__((aligned (32)));
        numeric::vec_simd<float, memory::__SIMD_VALUE__, 1> v;
        v.single(a);
        v = log(v);
        v.single(&res);
        return res; 
    }

    /*
    \brief Construction of the serial square root, 32-bit precision. Ths single function load/unload 
    a serial number only.
    */
    inline float ssqrt(float a){
        float res __attribute__((aligned (32)));
        numeric::vec_simd<float, memory::__SIMD_VALUE__, 1> v;
        v.single(a);
        v = sqrt(v);
        v.single(&res);
        return res; 
    }
    
    /*
    \brief Construction of the serial exponential, 64-bit precision. Ths single function load/unload 
    a serial number only.
    */
    inline double sexp(double a){
        double res __attribute__((aligned (32)));
        numeric::vec_simd<double, memory::__SIMD_VALUE__, 1> v;
        v.single(a);
        v = exp(v);
        v.single(&res);
        return res; 
    }
   
    /*
    \brief Construction of the serial logarithm, 64-bit precision. Ths single function load/unload 
    a serial number only.
    */
    inline double slog(double a){
        double res __attribute__((aligned (32)));
        numeric::vec_simd<double, memory::__SIMD_VALUE__, 1> v;
        v.single(a);
        v = log(v);
        v.single(&res);
        return res; 
    }
   
    /*
    \brief Construction of the serial square root, 64-bit precision. Ths single function load/unload 
    a serial number only.
    */
    inline double ssqrt(double a){
        double res __attribute__((aligned (32)));
        numeric::vec_simd<double, memory::__SIMD_VALUE__, 1> v;
        v.single(a);
        v = sqrt(v);
        v.single(&res);
        return res; 
    }

    /*
        declaration of the function for creating the C-library. For C++ directly used s**** functions
    */
    extern "C"{
        float cyme_fexp(float a){return sexp(a);} 
        float cyme_flog(float a){return slog(a);} 
        float cyme_fsqrt(float a){return ssqrt(a);} 
    
        double cyme_exp(double a){return sexp(a);} 
        double cyme_log(double a){return slog(a);} 
        double cyme_sqrt(double a){return ssqrt(a);} 
    }
#endif
