/*
 * CYME, License
 *
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef CYME_SIMD_LOG_HPP
#define CYME_SIMD_LOG_HPP


namespace numeric{
    template<class T, memory::simd O, int N,std::size_t n>
    struct Remez_log{
        static forceinline vec_simd<T,O,N> log(vec_simd<T,O,N> const& a){
            return helper_horner<T,O,N,coeff_remez_log,n>::horner(a);
        }
    };

    /**
        \brief implementation of the logarithm loge based on the binary representation of the float in the machine
        which is x = s*x0*2^n (where s the sign, always +), x0 (fraction) belongs between 1<=x0<2 and n the exponent (integer).
        Thus, log2(x) = log2(x0) + log2(2^n)
              log2(x) = log2(x0) + n
              log(x) = log(2) * log2(x)
        x0 and n are determinated by bit tips (manipulating the float representation), log2(x) as the "exponential solver"
        utilizes Remez approximation between 1 and 2.
    */
  template<class T, memory::simd O, int N,std::size_t n = poly_order<T,coeff_remez_log>::value, class Solver = Remez_log<T,O,N,n> >
    struct my_log{
        static forceinline vec_simd<T,O,N> log(vec_simd<T,O,N> x){
            vec_simd<T,O,N> log2(0.6931471805599453); // note futur: change this we get log10, etc ....
            vec_simd<T,O,N> e = ge(x); // ge = get exponent
            vec_simd<T,O,N> f = gf(x); // gf = get fraction
            x = log2*(Solver::log(f)+e);
            return x;
        }
    };

    /**
     \brief Vendor implementation of the logarithm
     */
    template<class T, memory::simd O, int N, std::size_t n>
    struct Vendor_log{
        static forceinline vec_simd<T,O,N> log(vec_simd<T,O,N> const& a){
            return log_v(a); /* call vendor wrapper */
        }
    };

    /**
     \brief Selector for the log
    */
    template<class T, memory::simd O, int N, std::size_t n = poly_order<T,coeff_remez_exp>::value, class Solver = my_log<T,O,N,n> > // my_log (to do) ou vendor
    struct Selector_log{
         static forceinline vec_simd<T,O,N> log(vec_simd<T,O,N> x){
               x = Solver::log(x);
               return x;
         }
    };

    /**
        \brief final wrapper for the log
    */
    template<class T,memory::simd O, int N>
    forceinline vec_simd<T,O,N> log(const vec_simd<T,O,N>& rhs){
        return Selector_log<T,O,N>::log(rhs);
    }
}
#endif

