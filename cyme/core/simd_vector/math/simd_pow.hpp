/*
 * CYME, License
 *
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne
 * Sam Yates - Swiss Federal Institute of technology in Lausanne
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef CYME_SIMD_POW_HPP
#define CYME_SIMD_POW_HPP

namespace numeric{
  
    /**
        \brief final specialization for the even number, tips with an additional default
        template parameter K (default value exponent%2 true) which make the selection 
        if it is a multiple of 2
    */
    template<class T,memory::simd O, int N, int M, int K = M%2>
    struct pow_helper{
        static forceinline vec_simd<T,O,N> pow(const vec_simd<T,O,N>& lhs){
             return pow_helper<T,O,N,M/2>::pow(lhs)*pow_helper<T,O,N,M/2>::pow(lhs);
        }
    };

    /**
        \brief  specialization n is an odd number, remarks with integer M/2 is equivalent 
        to (M-1)/2 e.g. 7/2 = 3.5 rounds to 3
    */
    template<class T,memory::simd O, int N, int M>
    struct pow_helper<T,O,N,M,1>{
        static forceinline vec_simd<T,O,N> pow(const vec_simd<T,O,N>& lhs){
             return lhs*pow_helper<T,O,N,M/2>::pow(lhs)*pow_helper<T,O,N,M/2>::pow(lhs);
        }
    };

    /**
        \brief final specialization for the pow M = 1
    */
    template<class T,memory::simd O, int N>
    struct pow_helper<T,O,N,1,1>{
        static forceinline vec_simd<T,O,N> pow(const vec_simd<T,O,N>& lhs){
             return lhs;
        }
    };
    
    /**
        \brief final wrapper for the pow (of M), the algo to calculate the power of n (uint given)
         is the following: x^n is decomposed following n
                           x^n = (x^n/2)^2 n even
                           x^n = n(x^n/2)^2 n odd
    */
    template<class T,memory::simd O, int N, int M>
    forceinline vec_simd<T,O,N> pow(const vec_simd<T,O,N>& lhs){
        return pow_helper<T,O,N,M>::pow(lhs);
    }
}
#endif

