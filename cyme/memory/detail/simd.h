/*
 * CYME, License
 *
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef CYME_SIMD_H
#define CYME_SIMD_H

namespace memory{
    struct unroll_factor{
        const static int N = __CYME_UNROLL_VALUE__ ;
    };

    /** \cond I do not need this part in the doc*/
    enum simd{sse, avx, qpx, mic}; 
    enum order{AoS, AoSoA};

    #define __GETSIMD__() __CYME_SIMD_VALUE__


    template<class T, memory::simd O>
    struct trait_register;

    /*
        size = size of the datas (byte) that can fit into the register, WARNING it is not NECESSARILY equal to the size of the register e.g. BG/q float
        a = needed alignement
    */

    template<class T>
    struct trait_register<T,sse>{
        const static int size=16;
        const static int a=16;
    };

    template<class T>
    struct trait_register<T,avx>{
        const static int size=32;
        const static int a=32;
    };

    template<class T>
    struct trait_register<T,mic>{
        const static int size=64;
        const static int a=64;
    };

    template<>
    struct trait_register<float,qpx>{
        const static int size=16; // 16 / sizeof(T) = 4 BG/Q does not support native 8 floats
        const static int a=32; // align 32 byte on BG/Q EVEN for float
    };

    template<>
    struct trait_register<double,qpx>{
        const static int size=32;
        const static int a=32;
    };


    template<class T, order O>
    struct stride;

    // just stride using meta-function
    template<class T>
    struct stride<T,AoS>{
        static inline std::size_t helper_stride(){return 1;}
    };

    template<class T>
    struct stride<T,AoSoA>{
        static inline std::size_t helper_stride(){return  unroll_factor::N*trait_register<T,__GETSIMD__()>::size/sizeof(T);}
    };
    /** \endcond I do not need this part in the doc*/

} //end namespace


#endif
