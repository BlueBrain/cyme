/*!

\page Page4 How does it work ?


Cyme uses the expression template metaprogramming techniqe,
as developed by Todd Veldhuizen \cite veldhuizen95. The particular
implementation derives from that of Vandervoorde and Jousuttis 
(\cite vandevoorde03, chapter 18).

The key to the optimization is to defer the evaluation of an
expression or its parts until its value is assigned.
We must therefore record in an object what operations are being applied to
which operands. The operations are determined at compile time and can therefore
be encoded in a template argument. As an example, the expression

    (*it)[1]*(*it)[2]+(*it)[3]/1.2;

could be encoded as

     V_Add<
             V_Mul<
                 Vec<double>(1), Vec<double>(2)
             >
        ,
             V_Div<
                 Vec<double>(3), Scalar(1.2)
             >
        >

This structure comprises a prefix-representation of the syntax tree.
The nested template class parameters represent the operations involved and
the types of the objects to which operations should be applied. Vec and Scalar
are placeholders for a scalar and SIMD register.

\image html DAG.png Construction of the corresponding DAG during the compilation

*/
