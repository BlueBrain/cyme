
   if(CYME_SSE_FOUND)
   set(SIMD_TECH "sse" CACHE STRING "SIMD technology for the sandbox: sse, avx")
   CHECK_CXX_COMPILER_FLAG("-msse4.1" SSE_FLAG)
   if(SSE_FLAG)
       SET(CMAKE_REQUIRED_FLAGS "-msse4.1")
       CHECK_CXX_SOURCE_COMPILES("#include <smmintrin.h> \n int main () {__m128 xmm=_mm_set_ps1(0.0); _mm_ceil_ps(xmm);};" SSE_COMPILATION)
       CHECK_CXX_SOURCE_RUNS("#include <smmintrin.h> \n int main () {__m128 xmm=_mm_set_ps1(0.0); _mm_ceil_ps(xmm);};" SSE_RUN)
       if(SSE_FLAG AND SSE_COMPILATION AND SSE_RUN)
          set(CYME_SIMD_FLAGS "-msse4.1")
          set(SIMD_LIST_TEST "sse")
       else(SSE_FLAG AND SSE_COMPILATION AND SSE_RUN)
          message(" -- Your machine does not support at least SSE 4.1, Cyme can not work")
       endif(SSE_FLAG AND SSE_COMPILATION AND SSE_RUN)
   endif(SSE_FLAG)
   endif(CYME_SSE_FOUND)

   if(CYME_AVX_FOUND)
   set(SIMD_TECH "avx" CACHE STRING "SIMD technology for the sandbox: sse, avx" FORCE) #overwrite avx better
   CHECK_CXX_COMPILER_FLAG("-mavx" AVX_FLAG)
   if(AVX_FLAG)
       SET(CMAKE_REQUIRED_FLAGS "-mavx")
       CHECK_CXX_SOURCE_COMPILES("#include <immintrin.h> \n int main () {__m256 xmm =_mm256_set1_ps(0.0); _mm256_ceil_ps(xmm);};" AVX_COMPILATION)
       CHECK_CXX_SOURCE_RUNS("#include <immintrin.h> \n int main () {__m256 xmm=_mm256_set1_ps(0.0); _mm256_ceil_ps(xmm);};" AVX_RUN)
       if(AVX_FLAG AND AVX_COMPILATION AND AVX_RUN)
          set(CYME_SIMD_FLAGS "-mavx")
          set(SIMD_LIST_TEST ${SIMD_LIST_TEST} "avx")
          set(SIMD_LIST_TESTING ${SIMD_LIST_TEST} CACHE STRING "SIMD technology for testing" )
       endif(AVX_FLAG AND AVX_COMPILATION AND AVX_RUN)
   endif(AVX_FLAG)
   endif(CYME_AVX_FOUND)

   if(CYME_VMX_FOUND)
   set(SIMD_TECH "vmx" CACHE STRING "SIMD technology for the sandbox: vmx") #overwrite avx better
   CHECK_CXX_COMPILER_FLAG("-mvsx" VMX_FLAG)
   if(VMX_FLAG)
       SET(CMAKE_REQUIRED_FLAGS "-mcpu=power8 -maltivec -mvsx")
       CHECK_CXX_SOURCE_COMPILES("#include <altivec.h> \n int main () {};" VMX_COMPILATION)
       CHECK_CXX_SOURCE_RUNS("#include <altivec.h> \n int main () {};" VMX_RUN)
       if(VMX_FLAG AND VMX_COMPILATION)
          set(CYME_SIMD_FLAGS "-mcpu=power8 -maltivec -mvsx")
          set(SIMD_LIST_TEST ${SIMD_LIST_TEST} "vmx")
          set(SIMD_LIST_TESTING ${SIMD_LIST_TEST} CACHE STRING "SIMD technology for testing" )
       endif(VMX_FLAG AND VMX_COMPILATION)
   endif(VMX_FLAG)
   endif(CYME_VMX_FOUND)

   if(CYME_NEON_FOUND)
   set(SIMD_TECH "neon" CACHE STRING "SIMD technology for the sandbox: neon") #overwrite avx better
   CHECK_CXX_COMPILER_FLAG("" NEON_FLAG)
   if(NEON_FLAG)
       CHECK_CXX_SOURCE_COMPILES("#include <arm_neon.h> \n int main(){ uint8x16_t vec_9 = vmovq_n_u8(9); vaddq_u8(vec_9,vec_9); };" NEON_COMPILATION)
       CHECK_CXX_SOURCE_RUNS("#include <arm_neon.h> \n int main(){ uint8x16_t vec_9 = vmovq_n_u8(9); vaddq_u8(vec_9,vec_9); };" NEON_RUN)
       if(NEON_FLAG AND NEON_COMPILATION)
          set(CYME_SIMD_FLAGS "")
          set(SIMD_LIST_TEST ${SIMD_LIST_TEST} "neon")
          set(SIMD_LIST_TESTING ${SIMD_LIST_TEST} CACHE STRING "SIMD technology for testing" )
       endif(NEON_FLAG AND NEON_COMPILATION)
   endif(NEON_FLAG)
   endif(CYME_NEON_FOUND)

   if(CYME_QPX_FOUND)
      message("-- QPX supported")
      set(SIMD_TECH "qpx" CACHE STRING "SIMD technology for the sandbox: qpx")
      set(SIMD_LIST_TEST "qpx")
      set(SIMD_LIST_TESTING ${SIMD_LIST_TEST} CACHE STRING "SIMD technology for testing" )
   endif(CYME_QPX_FOUND)

if(CYME_FMA_FOUND)
    if(CYME_SSE_FOUND)
        CHECK_CXX_COMPILER_FLAG("-mfma" FMA_FLAG)
        SET(CMAKE_REQUIRED_FLAGS "-msse4.1 -mfma")
        CHECK_CXX_SOURCE_COMPILES("#include <immintrin.h> \n int main () {__m128 xmm=_mm_set_ps1(0.0); _mm_fmadd_ps(xmm,xmm,xmm);};" FMA_COMPILATION)
        CHECK_CXX_SOURCE_RUNS("#include <immintrin.h> \n int main () {__m128 xmm=_mm_set_ps1(0.0); _mm_fmadd_ps(xmm,xmm,xmm);};" FMA_RUN)
        if(FMA_FLAG AND FMA_COMPILATION AND FMA_RUN)
           set(CYME_FMA_FLAGS "-mfma")
        endif(FMA_FLAG AND FMA_COMPILATION AND FMA_RUN)
    elseif(CYME_AVX_FOUND)
        CHECK_CXX_COMPILER_FLAG("-mfma" FMA_FLAG)
        SET(CMAKE_REQUIRED_FLAGS "-mavx -mfma")
        CHECK_CXX_SOURCE_COMPILES("#include <immintrin.h> \n int main () {__m256 xmm=_mm256_set1_ps(0.0); _mm256_fmadd_ps(xmm,xmm,xmm);};" FMA_COMPILATION)
        CHECK_CXX_SOURCE_RUNS("#include <immintrin.h> \n int main () {__m256 xmm=_mm256_set1_ps(0.0); _mm256_fmadd_ps(xmm,xmm,xmm);};" FMA_RUN)
        if(FMA_FLAG AND FMA_COMPILATION AND FMA_RUN)
           set(CYME_FMA_FLAGS "-mfma")
        endif(FMA_FLAG AND FMA_COMPILATION AND FMA_RUN)
    elseif(CYME_QPX_FOUND OR CYME_VMX_FOUND OR CYME_NEON_FOUND) #ISA Power/ARM always supports FMA
           message("-- FMA supported")
           set(CYME_FMA_FLAGS "-D__FMA__")
    endif(CYME_SSE_FOUND)
endif(CYME_FMA_FOUND)

#generate the define file
configure_file(${CMAKE_CURRENT_LIST_DIR}/configuration.h.in ${PROJECT_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/configuration.h @ONLY)
list(APPEND COMMON_INCLUDES ${PROJECT_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/configuration.h)
