#find which tech we have
if(MIC_NATIVE_FOUND)
   set(SIMD_TECH "mic" CACHE STRING "SIMD technology for the sandbox: sse, avx, qpx and mic")
   set(CYME_MIC "-mmic")
   set(SIMD_LIST_TEST "mic")
   set(SIMD_LIST_TESTING ${SIMD_LIST_TEST} CACHE STRING "SIMD technology for testing" )
else(MIC_NATIVE_FOUND)
   if(CYME_SSE4_1_FOUND)
   set(SIMD_TECH "sse" CACHE STRING "SIMD technology for the sandbox: sse, avx, qpx and mic")
   CHECK_CXX_COMPILER_FLAG("-msse4.1" SSE4_1_FLAG)
   if(SSE4_1_FLAG)
       SET(CMAKE_REQUIRED_FLAGS "-msse4.1")
       CHECK_CXX_SOURCE_COMPILES("#include <smmintrin.h> \n int main () {__m128 xmm=_mm_set_ps1(0.0); _mm_ceil_ps(xmm);};" SSE4_1_COMPILATION)
       CHECK_CXX_SOURCE_RUNS("#include <smmintrin.h> \n int main () {__m128 xmm=_mm_set_ps1(0.0); _mm_ceil_ps(xmm);};" SSE4_1_RUN)
       if(SSE4_1_FLAG AND SSE4_1_COMPILATION AND SSE4_1_RUN)
          set(CYME_SIMD_FLAGS "-msse4.1")
          set(SIMD_LIST_TEST "sse")
       else(SSE4_1_FLAG AND SSE4_1_COMPILATION AND SSE4_1_RUN)
          message(" -- Your machine does not support at least SSE 4.1, Cyme can not work")
       endif(SSE4_1_FLAG AND SSE4_1_COMPILATION AND SSE4_1_RUN)
   endif(SSE4_1_FLAG)
   endif(CYME_SSE4_1_FOUND)

   if(CYME_AVX1_0_FOUND)
   set(SIMD_TECH "avx" CACHE STRING "SIMD technology for the sandbox: sse, avx, qpx and mic" FORCE) #overwrite avx better
   CHECK_CXX_COMPILER_FLAG("-mavx" AVX1_0_FLAG)
   if(AVX1_0_FLAG)
       SET(CMAKE_REQUIRED_FLAGS "-mavx")
       CHECK_CXX_SOURCE_COMPILES("#include <immintrin.h> \n int main () {__m256 xmm =_mm256_set1_ps(0.0); _mm256_ceil_ps(xmm);};" AVX1_0_COMPILATION)
       CHECK_CXX_SOURCE_RUNS("#include <immintrin.h> \n int main () {__m256 xmm=_mm256_set1_ps(0.0); _mm256_ceil_ps(xmm);};" AVX1_0_RUN)
       if(AVX1_0_FLAG AND AVX1_0_COMPILATION AND AVX1_0_RUN)
          set(CYME_SIMD_FLAGS "-mavx")
          set(SIMD_LIST_TEST ${SIMD_LIST_TEST} "avx")
          set(SIMD_LIST_TESTING ${SIMD_LIST_TEST} CACHE STRING "SIMD technology for testing" )
       endif(AVX1_0_FLAG AND AVX1_0_COMPILATION AND AVX1_0_RUN)
   endif(AVX1_0_FLAG)
   endif(CYME_AVX1_0_FOUND)
endif(MIC_NATIVE_FOUND)

if(CYME_QPX_FOUND)
   message("-- QPX supported")
   set(SIMD_TECH "qpx" CACHE STRING "SIMD technology for the sandbox: sse, avx, qpx and mic")
   set(SIMD_LIST_TEST "qpx")
   set(SIMD_LIST_TESTING ${SIMD_LIST_TEST} CACHE STRING "SIMD technology for testing" )
endif(CYME_QPX_FOUND)

if(CYME_FMA_FOUND)
    if(CYME_SSE4_1_FOUND)
        CHECK_CXX_COMPILER_FLAG("-mfma" FMA_FLAG)
        SET(CMAKE_REQUIRED_FLAGS "-msse4.1 -mfma")
        CHECK_CXX_SOURCE_COMPILES("#include <immintrin.h> \n int main () {__m128 xmm=_mm_set_ps1(0.0); _mm_fmadd_ps(xmm,xmm,xmm);};" FMA_COMPILATION)
        CHECK_CXX_SOURCE_RUNS("#include <immintrin.h> \n int main () {__m128 xmm=_mm_set_ps1(0.0); _mm_fmadd_ps(xmm,xmm,xmm);};" FMA_RUN)
        if(FMA_FLAG AND FMA_COMPILATION AND FMA_RUN)
           set(CYME_FMA_FLAGS "-mfma")
        endif(FMA_FLAG AND FMA_COMPILATION AND FMA_RUN)
    elseif(CYME_AVX1_0_FOUND)
        CHECK_CXX_COMPILER_FLAG("-mfma" FMA_FLAG)
        SET(CMAKE_REQUIRED_FLAGS "-mavx -mfma")
        CHECK_CXX_SOURCE_COMPILES("#include <immintrin.h> \n int main () {__m256 xmm=_mm256_set1_ps(0.0); _mm256_fmadd_ps(xmm,xmm,xmm);};" FMA_COMPILATION)
        CHECK_CXX_SOURCE_RUNS("#include <immintrin.h> \n int main () {__m256 xmm=_mm256_set1_ps(0.0); _mm256_fmadd_ps(xmm,xmm,xmm);};" FMA_RUN)
        if(FMA_FLAG AND FMA_COMPILATION AND FMA_RUN)
           set(CYME_FMA_FLAGS "-mfma")
        endif(FMA_FLAG AND FMA_COMPILATION AND FMA_RUN)
    elseif(CYME_QPX_FOUND)
           message("-- FMA supported")
           set(CYME_FMA_FLAGS "-D__FMA__")
    endif(CYME_SSE4_1_FOUND)
endif(CYME_FMA_FOUND)

#generate the define file
configure_file(${CMAKE_CURRENT_LIST_DIR}/define_meta.h.in ${PROJECT_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/define_meta.h @ONLY)
list(APPEND COMMON_INCLUDES ${PROJECT_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/define_meta.h)


