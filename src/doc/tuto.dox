/*!

\page Page3 Tutorials

\section tuto1 Initialization and memory layout

In this first tutorial, we create an instance of cyme container. For the beginning,
we need and define a structure of 5 elements (here a channel).

    template<class T>
    struct channel{
        typedef T value_type;
        static const int value_size = 5;
    };

then we declare a cyme::array of 5 elements with AoS memory layout:

    cyme::array<channel<float>,5, memory::AoS> a;

If we prefer the memory layout AoSoS, we modify the declaration by:

    cyme::array<channel<float>,5, memory::AoSoA> a;

For the memory the difference is fondamental. In the first case element are consecutive one after one, where 
in the second case they are interleaved on the size of the SIMD register desired. 

\image html memoryAoS_AoSoA.tiff Memory layout of the container in function of the declaration memory::AoS or memory::AoSoA  

For the initialization, the bracket operator (i,j) is implemented. For both memory layout it will pick up element following the AoS layout ideology. 
We make this choice as it is easier for user to represent AoS layout in mind. 

\image html memory_access.tiff Memory access following the AoS ideology 

Thus we can write :

     cyme::array<channel<float>,5, memory::AoS> a; 
     cyme::array<channel<float>,5, memory::AoSoA> b; 

     a(3,0) = 3.4; 
     b(3,0) = 3.4; 
    
\section tuto2 Iterator and memory manipulation 

Based on the std::vector and std::array, cyme allows iterator mechanism, it is the main advantage of the library. As usual, the iterator manipulates the memory:
for the AoS layout, a simple iteration, move from one element to the next element. For the AoSoA, it will move for the next element which is four times « bigger ».
\image html iterator.tiff Manipulation into the container with the iterator
    
Thus we can write
  
    for(typename cyme::array<channel<float>,5, memory::AoSoA>::iterator it = a.begin(); it < a.end(); ++it)
        I do something 
      
A second operator [i] completes the first one (i,j), it access the memory with scalar access for AoS but with « vectorial access » with AoSoA.  
When we request an element from the iterator with AoS layout, we manipulate one element of data, and four for the AoSoA layout with the help
of SIMD technology.

\image html iterator2.tiff Manipulation of the data with the iterator

Thus, we can rewrite a new initialization as

    for(typename cyme::array<channel<float>,5, memory::AoSoA>::iterator it = a.begin(); it < a.end(); ++it)
        (*it)[1] = 3.4;

In 2 steps with the AoSoA layout the initialization is done, against  5 steps for AoS layout. In both case the algorithm is generic.
 
\section tuto3 Computation 
  
The last tutorial  performs operations. We simply request data from the iterator and perform operation like usual. But with the AoSoA layout,
we can compute our operations 4 times faster.

    cyme::array<synapse<float>,5, memory::AoSoA> b;
    init(b); // init function
    for(cyme::array<synapse<float>,5, memory::AoSoA>::iterator it = b.begin(); it < b.end(); ++it)
       (*it)[0] = (*it)[1]*(*it)[2]+(*it)[3]/1.2;

During the compilation the cyme framework will generate the DAG of this expression to obtain the best SIMD possible without useless copy.
The framework is more and less compatible with C++ features specially algorithm concept. The previous example my be rewritten using a functor and std::for_each

    template<class T>
    struct functor{
        void operator()(typename T::storage_type& S ){ // cyme::vector and cyme::array are built over cyme::storage
             S[0] = S[1]*S[2]+S[3]/1.2;
        }
    };

    typedef  cyme::vector<synapse<float>, 20,memory::AoSoA> my_array;
    std::for_each(b.begin(), b.end(), functor<my_array>() );

Alternatively with c++11 using lambda function,

    std::for_each(b.begin(), b.end(), [](my_vector::storage_type& S){S[0] = S[1]*S[2]+S[3]/1.2; } );

Other algorithms work well as std::fill but can differ for the representation as std::generate (iterators are not the same).
Until now containers can be mix, but algorithms mixing containers (AoS - AoSoA) are not possible as std::transform.

\section tuto4 Code

We summarize on a basic example

    #include <iostream>
    #include <algorithm>
    #include <boost/chrono.hpp>
   
    #include "cyme/cyme.hpp"
   
   
    template<class T>
    struct synapse{
        typedef T value_type;
        static const int value_size = 18;
    };
   
    template<class T>
    struct f_compute{
        void operator()(typename T::storage_type& S ){
             S[0] = exp(S[1])*S[2]+exp(S[3])/1.2;
        }
    };
   
    template<class T>
    struct f_init{
        void operator()(typename T::storage_type& S ){
            for(int i=0;i <T::size_block(); ++i)
                S[i] = drand48();
        }
    };
   
    int main(int argc, char* argv[]){
       typedef  cyme::vector<synapse<double>, memory::AoS> my_vector; 
       my_vector b(0xfffff,0);
       std::for_each(b.begin(), b.end(), f_init<my_vector>() );
   
       boost::chrono::system_clock::time_point start =  boost::chrono::system_clock::now();
           std::for_each(b.begin(), b.end(), f_compute<my_vector>() );
       boost::chrono::duration<double>  sec = boost::chrono::system_clock::now() - start;
   
       std::cout << " sec " << sec.count() << std::endl; }

*/
