/*
 * CYME, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef CYME_TRAIT_HPP
#define CYME_TRAIT_HPP

#include "memory/detail/simd.h"

namespace numeric{
    /** \cond I do not need this part in the doc
        \brief Basic trait to avoid duplication into simd_trait
    */
    template <typename T> // TO DO add a safety on the type float and double only
    struct trait{
        typedef T                  value_type; 
        typedef value_type*        pointer; 
        typedef const pointer      const_pointer; 
        typedef value_type &       reference;
        typedef value_type const & const_reference;
    };

    /**
        \brief This trait class associates basic type (float and double) to corresponding SIMD register (__m128, __m128d - 128-bit), 
        to allow a generic vectorial exponential
    */
    template <typename T, memory::simd O>
    struct simd_trait : public trait<T>{};
    /* \endcond I do not need this part in the doc */
}

#ifdef __x86_64__
#include "controller/simd_vector/detail/x86/trait_x86.ipp"
#endif

#ifdef _ARCH_QP
#include "controller/simd_vector/detail/powerpc64/trait_powerpc64.ipp"
#endif

#ifdef __MIC__
#include "controller/simd_vector/detail/mic/trait_mic.ipp"
#endif

#endif

