/*
 * CYME, License
 *
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef CYME_REMEZ_HPP
#define CYME_REMEZ_HPP


namespace numeric{
    //just encapsulate the number of coeff
    struct coeff_remez_number{
        static const std::size_t value = 9;
    };

    // no C++ 11, so no constexpr into structure for double/float, ^.^ just partial specialization
    template<class T, std::size_t n>
    struct coeff_remez;

    template<class T>
    struct coeff_remez<T,0>{
        const static inline T coeff() {return 0.99999999999998091336479463057053516986466888462081;}
    };

    template<class T>
    struct coeff_remez<T,1>{
        const static inline T coeff() {return 1.0000000000054730504284163017295863259125942049362;}
    };

    template<class T>
    struct coeff_remez<T,2>{
        const static inline T coeff() {return 0.49999999974109940909767965915362308135415179642286;}
    };

    template<class T>
    struct coeff_remez<T,3>{
        const static inline T coeff() {return 0.166666671414320541875332123507829990378055646330574;}
    };

    template<class T>
    struct coeff_remez<T,4>{
        const static inline T coeff() {return 4.1666622504201078708502686068113075402683415962893e-2;}
    };

    template<class T>
    struct coeff_remez<T,5>{
        const static inline T coeff() {return 8.3335688409829575034112982839739473866857586300664e-3;}
    };

    template<class T>
    struct coeff_remez<T,6>{
        const static inline T coeff() {return 1.38812674551586429265054343505879910146775323730237e-3;}
    };

    template<class T>
    struct coeff_remez<T,7>{
        const static inline T coeff() {return 1.99930498409474044486498978862963995247838069436646e-4;}
    };

    template<class T>
    struct coeff_remez<T,8>{
        const static inline T coeff() {return 2.299608440919942766555719515783308016700833740918e-5;}
    };

    template<class T>
    struct coeff_remez<T,9>{
        const static inline T coeff() {return 3.9099787920346160288874633639268318097077213911751e-6;}
    };

    /* \endcond I do not need this part in the doc*/
} //end namespace

#endif 
