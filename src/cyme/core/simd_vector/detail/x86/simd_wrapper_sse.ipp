/*
 * CYME, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef CYME_SIMD_WRAPPER_SSE_HPP
#define CYME_SIMD_WRAPPER_SSE_HPP

namespace numeric{
    /**
     \brief  Load a double-precision (64-bit) floating-point element from memory into both elements of dst.
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_load1<double,memory::sse>(const simd_trait<double,memory::sse>::value_type a){
        return _mm_load1_pd(&a);
    }

    /**
     \brief  Load 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from memory into dst. mem_addr must be aligned on a 16-byte boundary or a general-protection exception will be generated.
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_load<double,memory::sse>(simd_trait<double,memory::sse>::const_pointer a){
        return _mm_load_pd(a);
    }

    /**
     \brief  Store 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from a into memory. mem_addr must be aligned on a 16-byte boundary or a general-protection exception will be generated.
     */
    template<>
    void _mm_store<double,memory::sse>( simd_trait<double,memory::sse>::register_type xmm0,  simd_trait<double,memory::sse>::pointer a){
        _mm_store_pd(a,xmm0); 
    }

    /**
     \brief  Multiply packed double-precision (64-bit) floating-point elements in xmm0 and xmm1, and store the results in dst.
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_mul<double,memory::sse>( simd_trait<double,memory::sse>::register_type xmm0,  simd_trait<double,memory::sse>::register_type xmm1){
        return _mm_mul_pd(xmm0, xmm1);
    }

    /**
     \brief  Divide packed double-precision (64-bit) floating-point elements in xmm0 by packed elements in xmm1, and store the results in dst.
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_div<double,memory::sse>( simd_trait<double,memory::sse>::register_type xmm0,  simd_trait<double,memory::sse>::register_type xmm1){
        return _mm_div_pd(xmm0, xmm1);
    }

    /**
     \brief  Add packed double-precision (64-bit) floating-point elements in xmm0 by packed elements in xmm1, and store the results in dst.
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_add<double,memory::sse>( simd_trait<double,memory::sse>::register_type xmm0,  simd_trait<double,memory::sse>::register_type xmm1){
        return _mm_add_pd(xmm0, xmm1);
    }

    /**
     \brief  Sub packed double-precision (64-bit) floating-point elements in xmm0 by packed elements in xmm1, and store the results in dst.
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_sub<double,memory::sse>( simd_trait<double,memory::sse>::register_type xmm0,  simd_trait<double,memory::sse>::register_type xmm1){
        return _mm_sub_pd(xmm0, xmm1);
    }

    /**
     \brief Convert packed single-precision (32-bit) floating-point elements in xmm0 to packed double-precision (64-bit) floating-point elements, and store the results in dst.
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_rec<double,memory::sse>(simd_trait<double,memory::sse>::register_type xmm0){
        return _mm_cvtps_pd(_mm_rcp_ps(_mm_cvtpd_ps(xmm0)));
    }

    /**
     \brief Negate packed double-precision (64-bit) floating-point elements in xmm0 to packed double-precision (64-bit) floating-point elements, and store the results in dst.
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_neg<double,memory::sse>(simd_trait<double,memory::sse>::register_type xmm0){
        simd_trait<double,memory::sse>::register_type mask =  _mm_castsi128_pd(_mm_set1_epi64x(0x8000000000000000));
        return _mm_xor_pd(xmm0, mask);
    }

    /**
    \brief Convert packed double-precision (64-bit) floating-point elements in xmm0 to packed 32-bit integers with truncation, and store the results in dst.
    */
    template<>
    inline  simd_trait<int,memory::sse>::register_type _mm_floor<double,memory::sse>(simd_trait<double,memory::sse>::register_type xmm0){
        return _mm_cvttpd_epi32(_mm_floor_pd(xmm0));
    }

    /**
     \brief Convert packed 32-bit integers in xmm0 to packed double-precision (64-bit) floating-point elements, and store the results in dst.
    */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_cast<double,memory::sse>(simd_trait<int,memory::sse>::register_type xmm0){
        return  _mm_cvtepi32_pd(xmm0);
    }

    /**
     \brief Compute 2^k packed integer (64-bit) elements in xmm0 to packed double-precision (64-bit) floating-point elements, and store the results in dst.
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_twok<double,memory::sse>(simd_trait<int,memory::sse>::register_type xmm0){
        // OK it is more than a basic wrapper
        // xmm0 = _mm_add_epi32(xmm0,  _mm_setr_epi32(1023, 1023, 0, 0));
        // xmm0 = _mm_slli_epi32(xmm0, 20);
        // xmm0 = _mm_shuffle_epi32(xmm0, _MM_SHUFFLE(1,3,0,2));
        return  _mm_castsi128_pd(_mm_shuffle_epi32(_mm_slli_epi32(_mm_add_epi32(xmm0, _mm_setr_epi32(1023, 1023, 0, 0)), 20), _MM_SHUFFLE(1,3,0,2)));
    }


#ifdef __INTEL_COMPILER
    /**
     \brief Compute the exponential value of e raised to the power of packed double-precision (64-bit) floating-point elements in xmm0, and store the results in dst.
     \warning Intel compiler only
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_exp<double,memory::sse>( simd_trait<double,memory::sse>::register_type xmm0){
        return _mm_exp_pd(xmm0);
    }

    /**
     \brief Compute the natural logarithm of packed double-precision (64-bit) floating-point elements in xmm0, and store the results in dst.
     \warning Intel compiler only
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_log<double,memory::sse>( simd_trait<double,memory::sse>::register_type xmm0){
        return _mm_log_pd(xmm0);
    }
#endif

#ifdef __FMA__
    /**
     \brief Multiply packed double-precision (64-bit) floating-point elements in xmm0 and xmm2, add the intermediate result to packed elements in xmm2, and store the results in dst.
    */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_fma<double,memory::sse>(simd_trait<double,memory::sse>::register_type xmm0,
                                                                                        simd_trait<double,memory::sse>::register_type xmm1,
                                                                                        simd_trait<double,memory::sse>::register_type xmm2){
        return _mm_fmadd_pd(xmm0, xmm1, xmm2);
    }

    /**
     \brief Multiply packed double-precision (64-bit) floating-point elements in xmm0 and xmm1, add the negated intermediate result to packed elements in xmm1, and store the results in dst.
     */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_nfma<double,memory::sse>(simd_trait<double,memory::sse>::register_type xmm0,
                                                                                         simd_trait<double,memory::sse>::register_type xmm1,
                                                                                         simd_trait<double,memory::sse>::register_type xmm2){
        return _mm_fnmadd_pd(xmm0, xmm1, xmm2);
    }

    /**
     \brief Multiply packed double-precision (64-bit) floating-point elements in xmm0 and xmm1, subtract packed elements in xmm2 from the intermediate result, and store the results in dst.
    */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_fms<double,memory::sse>(simd_trait<double,memory::sse>::register_type xmm0,
                                                                                        simd_trait<double,memory::sse>::register_type xmm1,
                                                                                        simd_trait<double,memory::sse>::register_type xmm2){
        return _mm_fmsub_pd(xmm0, xmm1, xmm2);
    }

    /**
     \brief Multiply packed double-precision (64-bit) floating-point elements in xmm0 and xmm1, subtract packed elements in xmm2 from the negated intermediate result, and store the results in dst.
    */
    template<>
    inline  simd_trait<double,memory::sse>::register_type _mm_nfms<double,memory::sse>(simd_trait<double,memory::sse>::register_type xmm0,
                                                                                        simd_trait<double,memory::sse>::register_type xmm1,
                                                                                        simd_trait<double,memory::sse>::register_type xmm2){
        return _mm_fnmsub_pd(xmm0, xmm1, xmm2);
    }
#endif //end FMA

    /**
     \brief Load a single-precision (32-bit) floating-point element from memory into all elements of dst.
     */
    template<>
     simd_trait<float,memory::sse>::register_type _mm_load1<float,memory::sse>(const  simd_trait<float,memory::sse>::value_type a){
        return _mm_load1_ps(&a);
    }

    /**
     \brief Load 128-bits (composed of 4 packed single-precision (32-bit) floating-point elements) from memory into dst. mem_addr must be aligned on a 16-byte boundary or a general-protection exception will be generated.
     */
    template<>
     simd_trait<float,memory::sse>::register_type _mm_load<float,memory::sse>(simd_trait<float,memory::sse>::const_pointer a){
        return _mm_load_ps(a);
    }

    /**
     \brief Store 128-bits (composed of 4 packed single-precision (32-bit) floating-point elements) from a into memory. mem_addr must be aligned on a 16-byte boundary or a general-protection exception will be generated.
    */
    template<>
    void _mm_store<float,memory::sse>( simd_trait<float,memory::sse>::register_type xmm0,  simd_trait<float,memory::sse>::pointer a){
        _mm_store_ps(a,xmm0);
    }

    /**
     \brief Multiply packed single-precision (32-bit) floating-point elements in xmm0 and xmm1, and store the results in dst.
    */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_mul<float,memory::sse>( simd_trait<float,memory::sse>::register_type xmm0,  simd_trait<float,memory::sse>::register_type xmm1){
        return _mm_mul_ps(xmm0, xmm1);
    }

    /**
     \brief Divide packed single-precision (32-bit) floating-point elements in xmm0 and xmm1, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_div<float,memory::sse>( simd_trait<float,memory::sse>::register_type xmm0,  simd_trait<float,memory::sse>::register_type xmm1){
        return _mm_div_ps(xmm0, xmm1);
    }

    /**
     \brief Add packed single-precision (32-bit) floating-point elements in xmm0 and xmm1, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_add<float,memory::sse>( simd_trait<float,memory::sse>::register_type xmm0,  simd_trait<float,memory::sse>::register_type xmm1){
        return _mm_add_ps(xmm0, xmm1);
    }

    /**
     \brief Subtract packed single-precision (32-bit) floating-point elements in xmm0 and xmm1, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_sub<float,memory::sse>( simd_trait<float,memory::sse>::register_type xmm0,  simd_trait<float,memory::sse>::register_type xmm1){
        return _mm_sub_ps(xmm0, xmm1);
    }

    /**
     \brief Compute the approximate reciprocal of packed single-precision (32-bit) floating-point elements in xmm0, and store the results in dst. The maximum relative error for this approximation is less than 1.5*2^-12.
     */
    template<>
    inline simd_trait<float,memory::sse>::register_type _mm_rec<float,memory::sse>(simd_trait<float,memory::sse>::register_type xmm0){
        return _mm_rcp_ps(xmm0);
    }

    /**
     \brief Negate packed single-precision (re-bit) floating-point elements in xmm0 to packed single-precision (632-bit) floating-point elements, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_neg<float,memory::sse>(simd_trait<float,memory::sse>::register_type xmm0){
        simd_trait<float,memory::sse>::register_type mask =  _mm_castsi128_ps(_mm_set1_epi32(0x80000000));
        return _mm_xor_ps(xmm0, mask);
    }

    /**
     \brief Convert packed single-precision (32-bit) floating-point elements in xmm0 to packed 32-bit integers with truncation, and store the results in dst.
     */
    template<>
    inline  simd_trait<int,memory::sse>::register_type _mm_floor<float,memory::sse>(simd_trait<float,memory::sse>::register_type xmm0){
        return _mm_cvttps_epi32(_mm_floor_ps(xmm0));
    }

    /**
     \brief Convert packed 32-bit integers in xmm0 to packed single-precision (32-bit) floating-point elements, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_cast<float,memory::sse>(simd_trait<int,memory::sse>::register_type xmm0){
        return  _mm_cvtepi32_ps(xmm0);
    }

    /**
     \brief Compute 2^k packed integer (32-bit) elements in xmm0 to packed single-precision (32-bit) floating-point elements, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_twok<float,memory::sse>(simd_trait<int,memory::sse>::register_type xmm0){
        // ((int + 127) << 23) <=> int to float
        return  _mm_castsi128_ps(_mm_slli_epi32(_mm_add_epi32(xmm0, _mm_set1_epi32(127)), 23));
    }


#ifdef __INTEL_COMPILER
    /**
      \brief   Compute the exponential value of e raised to the power of packed single-precision (32-bit) floating-point elements in xmm0, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_exp<float,memory::sse>( simd_trait<float,memory::sse>::register_type xmm0){
        return _mm_exp_ps(xmm0);
    }

    /**
     \brief   Compute the logarithm value of e raised to the power of packed single-precision (32-bit) floating-point elements in xmm0, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_log<float,memory::sse>( simd_trait<float,memory::sse>::register_type xmm0){
        return _mm_log_ps(xmm0);
    }
#endif

#ifdef __FMA__
    /**
     \brief Multiply packed single-precision (32-bit) floating-point elements in xmm0 and xmm1, add the intermediate result to packed elements in xmm2, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_fma<float,memory::sse>(simd_trait<float,memory::sse>::register_type xmm0,
                                                                                      simd_trait<float,memory::sse>::register_type xmm1,
                                                                                      simd_trait<float,memory::sse>::register_type xmm2){
        return _mm_fmadd_ps(xmm0, xmm1, xmm2);
    }

    /**
     \brief Multiply packed single-precision (32-bit) floating-point elements in xmm0 and xmm1, add the negated intermediate result to packed elements in xmm2, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_nfma<float,memory::sse>(simd_trait<float,memory::sse>::register_type xmm0,
                                                                                       simd_trait<float,memory::sse>::register_type xmm1,
                                                                                       simd_trait<float,memory::sse>::register_type xmm2){
        return _mm_fnmadd_ps(xmm0, xmm1, xmm2);
    }

    /**
     \brief Multiply packed single-precision (32-bit) floating-point elements in xmm0 and xmm1, subtract packed elements in xmm2 from the intermediate result, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_fms<float,memory::sse>(simd_trait<float,memory::sse>::register_type xmm0,
                                                                                      simd_trait<float,memory::sse>::register_type xmm1,
                                                                                      simd_trait<float,memory::sse>::register_type xmm2){
        return _mm_fmsub_ps(xmm0, xmm1, xmm2);
    }

    /**
     \brief Multiply packed single-precision (32-bit) floating-point elements in xmm0 and xmm1, subtract packed elements in xmm2 from the negated intermediate result, and store the results in dst.
     */
    template<>
    inline  simd_trait<float,memory::sse>::register_type _mm_nfms<float,memory::sse>(simd_trait<float,memory::sse>::register_type xmm0,
                                                                                      simd_trait<float,memory::sse>::register_type xmm1,
                                                                                      simd_trait<float,memory::sse>::register_type xmm2){
        return _mm_fnmsub_ps(xmm0, xmm1, xmm2);
    }

#endif //end FMA


} //end namespace 

#endif 
