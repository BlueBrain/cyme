/*
 * CYME, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef CYME_SIMD_WRAPPER_QPX_HPP
#define CYME_SIMD_WRAPPER_QPX_HPP

#include <boost/cstdint.hpp>

extern "C" vector4double expd4(vector4double);// link to the fortran one 
extern "C" vector4double logd4(vector4double);// link to the fortran one 

namespace numeric{
    // tools to make calculate 2^k as vectorial integer operations are not supported 
    typedef union {
        double d;
        boost::uint64_t ll;
    } ieee754;

    inline double uint642dp(boost::uint64_t ll) {
        ieee754 tmp;
        tmp.ll=ll;
        return tmp.d;
    }
    // QPX does not support float
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_load1<float,memory::qpx>(simd_trait<float,memory::qpx>::value_type a){
        return vec_splats(a);
    }
   
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_load<float,memory::qpx>(simd_trait<float,memory::qpx>::const_pointer a){
        return vec_lda(0L,a);
    }

    template<>
    inline void _mm_store<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::pointer a){
        vec_sta(xmm0,0L,a);
    }
   
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_mul<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::register_type xmm1){
        return vec_mul(xmm0, xmm1);
    };
   
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_div<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::register_type xmm1){
        return vec_swdiv_nochk(xmm0, xmm1);
    };
   
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_add<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::register_type xmm1){
        return vec_add(xmm0, xmm1);
    };

    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_sub<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::register_type xmm1){
        return vec_sub(xmm0, xmm1);
    };

    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_exp<float,memory::qpx>(simd_trait<float,memory::qpx>::register_type xmm0){
        return expd4(xmm0);
    }

    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_log<float,memory::qpx>(simd_trait<float,memory::qpx>::register_type xmm0){
        return logd4(xmm0);
    }

    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_rec<float,memory::qpx>(simd_trait<float,memory::qpx>::register_type xmm0){
        return vec_re(xmm0);
    };

    template<>
    inline  simd_trait<float,memory::qpx>::register_type _mm_neg<float,memory::qpx>(simd_trait<float,memory::qpx>::register_type xmm0){
        return vec_neg(xmm0);
    };

    template<>
    inline  simd_trait<float,memory::qpx>::register_type _mm_cast<float,memory::qpx>(simd_trait<int,memory::qpx>::register_type xmm0){
        return  xmm0; // this int is already a float as floor is saved into vec_double
    }

    template<>
    inline  simd_trait<int,memory::qpx>::register_type _mm_floor<float,memory::qpx>(simd_trait<float,memory::qpx>::register_type xmm0){
        return vec_floor(xmm0);
    }

    template<>
    inline  simd_trait<double,memory::qpx>::register_type _mm_twok<float,memory::qpx>(simd_trait<int,memory::qpx>::register_type xmm0){
  //      simd_trait<double,memory::qpx>::register_type xmm1 =  vec_ctid(xmm0);
        boost::uint32_t n;
        for(int i=0; i<4; ++i){
            ieee754 u;
            u.d = 0;
            n = vec_extract(xmm0,i);
            double d = uint642dp(( ((boost::uint64_t)n) +1023)<<52); 
            vec_insert(d,xmm0,i);
        }
        return xmm0; 
    }

#ifdef __FMA__
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_fma<float,memory::qpx>(simd_trait<float,memory::qpx>::register_type xmm0, simd_trait<float,memory::qpx>::register_type xmm1, simd_trait<float,memory::qpx>::register_type xmm2){
        return vec_madd(xmm0, xmm1, xmm2);
    };

    template<>
    inline  simd_trait<float,memory::qpx>::register_type _mm_nfma<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::register_type xmm1,  simd_trait<float,memory::qpx>::register_type xmm2){
        return vec_nmsub(xmm0, xmm1, xmm2); // QPX != AVX for this operations, add <-> sub
    };

    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_fms<float,memory::qpx>(simd_trait<float,memory::qpx>::register_type xmm0, simd_trait<float,memory::qpx>::register_type xmm1, simd_trait<float,memory::qpx>::register_type xmm2){
        return vec_msub(xmm0, xmm1, xmm2);
    };

    template<>
    inline  simd_trait<float,memory::qpx>::register_type _mm_nfms<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::register_type xmm1,  simd_trait<float,memory::qpx>::register_type xmm2){
        return vec_nmadd(xmm0, xmm1, xmm2); // QPX != AVX for this operation, add <-> sub
    };
#endif

    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_load1<double,memory::qpx>(simd_trait<double,memory::qpx>::value_type a){
        return vec_splats(a);
    }
   
    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_load<double,memory::qpx>(simd_trait<double,memory::qpx>::const_pointer a){
        return  vec_lda(0L,a);
    }

    template<>
    inline void _mm_store<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::pointer a){
        vec_sta(xmm0,0L,a);
    }
   
    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_mul<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::register_type xmm1){
        return vec_mul(xmm0, xmm1);
    };
   
    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_div<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::register_type xmm1){
        return vec_swdiv_nochk(xmm0, xmm1);
    };
   
    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_add<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::register_type xmm1){
        return vec_add(xmm0, xmm1);
    };

    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_sub<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::register_type xmm1){
        return vec_sub(xmm0, xmm1);
    };

    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_exp<double,memory::qpx>(simd_trait<double,memory::qpx>::register_type xmm0){
        return expd4(xmm0);
    }

    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_log<double,memory::qpx>(simd_trait<double,memory::qpx>::register_type xmm0){
        return logd4(xmm0);
    }

    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_rec<double,memory::qpx>(simd_trait<double,memory::qpx>::register_type xmm0){
        return vec_re(xmm0); // vec_res ????
    };

    template<>
    inline  simd_trait<double,memory::qpx>::register_type _mm_neg<double,memory::qpx>(simd_trait<double,memory::qpx>::register_type xmm0){
        return vec_neg(xmm0);
    };

    template<>
    inline  simd_trait<int,memory::qpx>::register_type _mm_floor<double,memory::qpx>(simd_trait<double,memory::qpx>::register_type xmm0){
        return vec_floor(xmm0);
    }

    template<>
    inline  simd_trait<double,memory::qpx>::register_type _mm_cast<double,memory::qpx>(simd_trait<int,memory::qpx>::register_type xmm0){
        return  xmm0; // this int is already a float as floor is saved into vec_double, so no cast
    }


    template<>
    inline  simd_trait<double,memory::qpx>::register_type _mm_twok<double,memory::qpx>(simd_trait<int,memory::qpx>::register_type xmm0){
        boost::uint32_t n;
        for(int i=0; i<4; ++i){
            ieee754 u;
            u.d = 0;
            n = vec_extract(xmm0,i);
            double d = uint642dp(( ((boost::uint64_t)n) +1023)<<52); 
            xmm0 = vec_insert(d,xmm0,i);
        }
        return xmm0; 
    }

#ifdef __FMA__
    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_fma<double,memory::qpx>(simd_trait<double,memory::qpx>::register_type xmm0,
                                                                                     simd_trait<double,memory::qpx>::register_type xmm1,
                                                                                     simd_trait<double,memory::qpx>::register_type xmm2){
        return vec_madd(xmm0, xmm1, xmm2);
    };

    template<>
    inline  simd_trait<double,memory::qpx>::register_type _mm_nfma<double,memory::qpx>(simd_trait<double,memory::qpx>::register_type xmm0,
                                                                                       simd_trait<double,memory::qpx>::register_type xmm1,
                                                                                       simd_trait<double,memory::qpx>::register_type xmm2){
        return vec_nmsub(xmm0, xmm1, xmm2); // QPX != AVX for this operations, add <-> sub
    };

    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_fms<double,memory::qpx>(simd_trait<double,memory::qpx>::register_type xmm0,
                                                                                     simd_trait<double,memory::qpx>::register_type xmm1,
                                                                                     simd_trait<double,memory::qpx>::register_type xmm2){
        return vec_msub(xmm0, xmm1, xmm2);
    };

    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_nfms<double,memory::qpx>(simd_trait<double,memory::qpx>::register_type xmm0,
                                                                                      simd_trait<double,memory::qpx>::register_type xmm1,
                                                                                      simd_trait<double,memory::qpx>::register_type xmm2){
        return vec_nmadd(xmm0, xmm1, xmm2); // QPX != AVX for this operations, add <-> sub
    };
#endif
} //end namespace 

#endif 
