/*
 * CYME, License
 *
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#ifndef CYME_VECTOR_HPP
#define CYME_VECTOR_HPP

#include "memory/detail/simd.h"
#include "memory/allocator.hpp"
#include "memory/detail/storage.hpp"

namespace memory{


    template<class T, std::size_t M,  memory::order O>
    class block_v{
    };

    /**
     \brief block_v of the memory (partial specialization) is instantiated following  AoS layout
     T is the type, M the size of the subblock_v and N the total number of subblock_v. For AoS  specialization
     datas are contiguous block_v after block_v.b I just instantiate a boost::array of block_v
     */
    template<class T, std::size_t M>
    class block_v<T,M,AoS> : public std::vector<storage<T,M,AoS>, memory::Allocator<storage<T,M,AoS> > > {
    public:
        typedef std::size_t                   size_type;
        typedef T                             value_type;
        typedef value_type&                   reference;
        typedef const value_type&             const_reference;
        typedef storage<T,M,AoS>              storage_type;
        typedef std::vector<storage_type, memory::Allocator<storage_type> >  base_type; //default template seems impossible on partial specialization
        typedef typename  base_type::iterator iterator;

        /**
         \brief Default constructor, the block_v is set up to 0
         */
        explicit block_v(const size_type size, const value_type value)
        :base_type(size,storage_type(value)){
        }

        /**
         \brief return the value of the block_v i, element j, write only
         */
        inline reference operator()(size_type i, size_type j){
            BOOST_ASSERT_MSG( i < base_type::size(), "out of range: block_v AoS i" );
            BOOST_ASSERT_MSG( j < M, "out of range: block_v AoS j" );
            return base_type::operator[](i)(j);
        }

        /**
         \brief return the value of the subblock_v i, element j, read only
         */
        inline const_reference operator()(size_type i, size_type j) const{
            BOOST_ASSERT_MSG( i < base_type::size(), "out of range: block_v AoS i" );
            BOOST_ASSERT_MSG( j < M, "out of range: block_v AoS j" );
            return base_type::operator[](i)(j);
        }

        /**
         \brief return the number of subblock_v into the full block_v
         */
        static inline size_type number_block() {
            return storage_type::size();
        }

        /**
         \brief return the size of basic subblock_v
         */
        static inline size_type size_block() {
            return M;
        }

    };

    template<class T, std::size_t M>
    class block_v<T,M,AoSoA> : public std::vector<storage<T,__GETSIMD__()/sizeof(T)*M,AoSoA>, memory::Allocator<storage<T,__GETSIMD__()/sizeof(T)*M,AoSoA> > >{
    public:
        typedef std::size_t                                               size_type;
        typedef T                                                         value_type;
        typedef value_type&                                               reference;
        typedef const value_type&                                         const_reference;
        typedef storage<T,__GETSIMD__()/sizeof(T)*M,AoSoA>                storage_type;
        typedef std::vector<storage_type, memory::Allocator<storage<T,__GETSIMD__()/sizeof(T)*M,AoSoA> > >   base_type;                  //default template seems impossible on partial specialization
        typedef typename  base_type::iterator                             iterator;

        block_v(const size_type size, const value_type value)
        :base_type(size/(__GETSIMD__()/sizeof(T))+1, storage_type(value)){
        }

        inline reference operator()(size_type i, size_type j){
            BOOST_ASSERT_MSG( i < base_type::size(), "out of range: block_v AoSoA i" );
            BOOST_ASSERT_MSG( j < M, "out of range: block_v AoSoA j" );
            // Please tune me ! (does it exist an alternative to this ? ^_^
            return base_type::operator[]((i*M+j)/(M*__GETSIMD__()/sizeof(T)))                         //(i)
            (j*(__GETSIMD__()/sizeof(T)) + i%(__GETSIMD__()/sizeof(T)));  //(j)
        };

        inline const_reference operator()(size_type i, size_type j) const{
            BOOST_ASSERT_MSG( i < base_type::size(), "out of range: block_v AoSoA i" );
            BOOST_ASSERT_MSG( j < M, "out of range: block_v AoSoA j" );
            // Please tune me ! (does it exist an alternative to this ? ^_^
            return base_type::operator[]((i*M+j)/(M*__GETSIMD__()/sizeof(T))) //(i)
            (j*(__GETSIMD__()/sizeof(T)) + i%(__GETSIMD__()/sizeof(T)));  //(j)
        };

        static inline size_type number_block() {
            return base_type::size();
        }

        static inline size_type size_block() {
            return M;
        }
    };
}

namespace cyme {
    /*
     \brief  This class facilitates the creation of an array of synapses (or whatever), the condition the class
     must encapsulate the basic type (value_type) and the size (value_size) of the basic object under the form:
     template <class T>
     class example{
     typedef T value_type;
     static const int value_size = 5;
     }
     */
    template<class T, memory::order O>
    class vector : public memory::block_v<typename T::value_type,  T::value_size, O>{
    public:

        explicit vector(const size_t size = 1, const typename T::value_type value = typename T::value_type())
        :memory::block_v<typename T::value_type, T::value_size, O>(size, value){
        }
   };
}

#endif
