/*
 * CYME, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef CYME_FACTORIAL_HPP
#define CYME_FACTORIAL_HPP

namespace numeric{
    /** 
    \brief Calculate the factorial of n 
    \param none
    */
    template<std::size_t n>
    inline std::size_t factorial(){
        return n*factorial<n-1>();
    }

    /* \cond I do not need this part in the doc*/
    template<>
    inline std::size_t factorial<0>(){
        return 1; 
    }
    /* \endcond */

    /** 
        \brief This class helps the quotient_factorial function for partial spercialization, as partial specialization is not allowed on a "basic" template function
        template parameter must respect m < n
    */
    template<std::size_t m, std::size_t n>
    struct helper_quotient_factorial{
       /**  fn static inline std::size_t quotient_factorial()
       \brief calculate the quotient of two factorial n!/m! with m < n 
       \param none
       */
       static inline std::size_t quotient_factorial(){
           return n*helper_quotient_factorial<m,n-1>::quotient_factorial();
       }
    };

    /* \cond I do not need this part in the doc*/
    template<std::size_t m>
    struct helper_quotient_factorial<m,m>{
       static inline std::size_t quotient_factorial(){
           return 1;
       }
    };
    /* \endcond */
} //end namespace 

#endif 
