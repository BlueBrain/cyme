/*
 * CoreBluron, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef COREBLURON_EXP_HPP
#define COREBLURON_EXP_HPP

#include <math.h>  

#include "numeric/math/remez.hpp"

namespace numeric{

    /*! \class template<std::size_t T, std::size_t n> helper_exp  
        \brief This class implements the exp function based on the definition of the mathematical series, the template parameter n
        fixes the limit of the development, in practice n=20 is a maximum. For larger n, overflow accurs when we calculate the factorial.
    */
    template<class T, std::size_t n>
    struct helper_exp{
        inline static T exp(T const& a){
            return pow<T,n>(a)/factorial<n>()+helper_exp<T,n-1>::exp(a);
        }
    };

    /* \cond I do not need this part in the doc*/
    template<class T>
    struct helper_exp<T,0>{
        inline static T exp(T const& a){
            return T(1); //1 for basic type, xmm registers set up to 1 for simd
        }
    };
    /* \endcond */

    /*! \class template<std::size_t T, std::size_t p, std::size_t q. std::size_t i> helper_Pade_numerateur  
        \brief This class implements the numerator of the Pade Approximant of the exponential function 
    */
    template<class T, std::size_t p, std::size_t q, std::size_t i>
    struct helper_Pade_numerator{
         /**  fn inline static T Pade_numerateur( T const& a
         \brief calculate the numerator ofthe Pade Aipproximant, when I multiply factorial together, I may have an overflow thus I cast to T i.e. a double, or a simd register,
         I get more precision, and I expand until 14
         \param T const& a
         */
         inline static T Pade_numerator( T const& a){
             // -> this is the original version limited until n = 8, return (factorial<p>()*factorial<p+q-i>()*pow<T,i>(a))/(factorial<p-i>()*factorial<p+q>()*factorial<i>())+helper_Pade_numerateur<T,p,q,i-1>::Pade_numerateur(a);
             return  ((T)helper_quotient_factorial<q-i,p+q-i>::quotient_factorial()*pow<T,i>(a))/((T)helper_quotient_factorial<p,p+q>::quotient_factorial())*(T)1.0/factorial<i>()+helper_Pade_numerator<T,p,q,i-1>::Pade_numerator(a);
         }
    };

    /* \cond I do not need this part in the doc*/
    template<class T, std::size_t p, std::size_t q>
    struct helper_Pade_numerator<T,p,q,0>{
         inline static T Pade_numerator( T const& a){
             return T(1);
         }
    };
    /* \endcond */

    /*! \class template<std::size_t T, std::size_t p, std::size_t q. std::size_t i> helper_Pade_numerateur  
        \brief This class implements the denominator of the Pade Approximat of the exponential function 
    */
    template<class T, std::size_t p, std::size_t q, std::size_t j>
    struct helper_Pade_denominator{
         /**  fn inline static T Pade_denomerator( T const& a
         \brief calculate the denomerator ofthe Pade Approximant, when I multiply factorial together, I may have an overflow thus I cast to T i.e. a double,
         I get more precision, and I can expand until 14
         \param T const& a
         */
         inline static T Pade_denominator( T const& a){
             // -> this is the original version limited until n = 8, return pow<int,j>(-1)*(factorial<q>()*factorial<p+q-j>()*pow<T,j>(a))/(factorial<q-j>()*factorial<p+q>()*factorial<j>())+helper_Pade_denominateur<T,p,q,j-1>::Pade_denominateur(a);
             return pow<int,j>(-1)*((T)helper_quotient_factorial<q-j,p+q-j>::quotient_factorial()*pow<T,j>(a))/((T)helper_quotient_factorial<p,p+q>::quotient_factorial())*(T)1.0/factorial<j>()+helper_Pade_denominator<T,p,q,j-1>::Pade_denominator(a);

         }
    };
    /* \endcond */

    /* \cond I do not need this part in the doc*/
    template<class T, std::size_t p, std::size_t q>
    struct helper_Pade_denominator<T,p,q,0>{
         inline static T Pade_denominator(T const& a){
             return T(1);
         }
    };

    template<class T, std::size_t n>
    struct Series_exp{
        /** fn template<std::size_t T, std::size_t n> exp  
            \brief clean wrapper of the exp series method 
        */
        static inline T exp(T const& a){
            return helper_exp<T,n>::exp(a);
        }
    };

    template<class T, std::size_t n>
    struct Pade_exp{
        /** fn template<std::size_t T, std::size_t n> Pade_exp  
            \brief clean wrapper of the Pade approximat method 
        */
        static inline T exp(T const& a){
            return helper_Pade_numerator<T,n,n,n>::Pade_numerator(a)/helper_Pade_denominator<T,n,n,n>::Pade_denominator(a);
        }
    };
    
    template<class T, std::size_t n>
    struct helper_remez_exp{
        static inline T exp(T const& a){
//          return pow<T,n>(a)*T(coeff_remez<T,n>::coeff()) + helper_remez_exp<T,n-1>::exp(a); // classic implementation very slow as pow is recalculating
//          for every iteration, not optimium as 20 is hardcoded
            return  T(coeff_remez<T,coeff_remez_number::value-n>::coeff()) + helper_remez_exp<T,n-1>::exp(a)*a;
        }
    };

    template<class T>
    struct helper_remez_exp<T,0>{
        static inline T exp(T const& a){
            return T(coeff_remez<T,coeff_remez_number::value>::coeff());
        }
    };

    template<class T, std::size_t n>
    struct Remez_exp{
        /** fn template<std::size_t T, std::size_t n> Pade_exp  
            \brief clean wrapper of the Pade approximat method 
        */
        static inline T exp(T const& a){
            return helper_remez_exp<T,n>::exp(a);
        }
    };


    template<class T, std::size_t n>
    struct Constructor_exp{
        static inline T exp(T const& a){
            return exp_v(a);            
        }
    };    

    /** \class template<std::size_t T, std::size_t n, class Solver> exp  
        \brief final wrapper for the exp, pade approximant with n = 14 (maximum value before pb), remez calculate with n=20
    */
    template<class T, std::size_t n = coeff_remez_number::value, class Solver = Remez_exp<T,n> >
    struct Helper_exp{
        static inline T exp(T const& a){
             return Solver::exp(a);
        }
    };


} //end namespace 

#endif 
