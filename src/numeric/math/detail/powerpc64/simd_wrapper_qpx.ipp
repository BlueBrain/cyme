/*
 * CoreBluron, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef COREBLURON_SIMD_WRAPPER_QPX_HPP
#define COREBLURON_SIMD_WRAPPER_QPX_HPP

extern "C" vector4double expd4(vector4double);// link to the fortran one 

namespace numeric{
    // QPX does not support float
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_load1<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::value_type a){
        return (xmm0 = vec_lds(0L,&a)); 
    }
   
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_load<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::const_pointer a){
        return (xmm0 = vec_lda(0L,a)); 
    }

    template<>
    inline void _mm_store<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::pointer a){
        vec_sta(xmm0,0L,a);
    }
   
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_mul<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::register_type xmm1){
        return (xmm0 = vec_mul(xmm0, xmm1));
    };
   
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_div<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::register_type xmm1){
        return (xmm0 = vec_swdiv(xmm0, xmm1));
    };
   
    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_add<float,memory::qpx>( simd_trait<float,memory::qpx>::register_type xmm0,  simd_trait<float,memory::qpx>::register_type xmm1){
        return (xmm0 = vec_add(xmm0, xmm1));
    };

    template<>
    inline simd_trait<float,memory::qpx>::register_type _mm_exp<float,memory::qpx>(simd_trait<float,memory::qpx>::register_type xmm0){
        return (xmm0 = expd4(xmm0));
    }
    // QPX does not support double
    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_load1<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::value_type a){
        return (xmm0 = vec_lds(0L,&a)); 
    }
   
    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_load<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::const_pointer a){
        return (xmm0 = vec_lda(0L,a)); 
    }

    template<>
    inline void _mm_store<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::pointer a){
        vec_sta(xmm0,0L,a);
    }
   
    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_mul<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::register_type xmm1){
        return (xmm0 = vec_mul(xmm0, xmm1));
    };
   
    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_div<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::register_type xmm1){
        return (xmm0 = vec_swdiv(xmm0, xmm1));
    };
   
    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_add<double,memory::qpx>( simd_trait<double,memory::qpx>::register_type xmm0,  simd_trait<double,memory::qpx>::register_type xmm1){
        return (xmm0 = vec_add(xmm0, xmm1));
    };

    template<>
    inline simd_trait<double,memory::qpx>::register_type _mm_exp<double,memory::qpx>(simd_trait<double,memory::qpx>::register_type xmm0){
        return (xmm0 = expd4(xmm0));
    }

} //end namespace 

#endif 
