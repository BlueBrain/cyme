/*
 * CoreBluron, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef COREBLURON_REMEZ_HPP
#define COREBLURON_REMEZ_HPP


namespace numeric{
    // no C++ 11, so no constexpr into structure for double/float
   // T is a vector/basic type so the value_type will fail for basic type (float/double). I need a trait class.
    template <class T>
    struct remez_trait{
        typedef typename T::value_type value_type;
    };
 
    template<>
    struct remez_trait<double>{
        typedef double value_type;
    };
    
    template<>
    struct remez_trait<float>{
        typedef float value_type;
    };
   
    template<class T, std::size_t n>
    struct coeff_remez;
    
    template<class T>
    struct coeff_remez<T,0>{
        const static inline typename remez_trait<T>::value_type coeff() {return 1.0000000088202737643606520500760469169470;}
    };
    
    template<class T>
    struct coeff_remez<T,1>{
        const static inline typename remez_trait<T>::value_type coeff() {return 9.999999353104667351268387787079316922093e-1;}
    };
    
    template<class T>
    struct coeff_remez<T,2>{
        const static inline typename remez_trait<T>::value_type coeff() {return 4.999998861794840096352906937612739653682e-1;}
    };
    
    template<class T>
    struct coeff_remez<T,3>{
        const static inline typename remez_trait<T>::value_type coeff() {return 1.666667242223872775688661925992328478409e-1;}
    };

    template<class T>
    struct coeff_remez<T,4>{
        const static inline typename remez_trait<T>::value_type coeff() {return 4.166679480108744059957660795019461239025e-2;}
    };

    template<class T>
    struct coeff_remez<T,5>{
        const static inline typename remez_trait<T>::value_type coeff() {return 8.333338741989624499111024292402535066588e-3;}
    };
    
    template<class T>
    struct coeff_remez<T,6>{
        const static inline typename remez_trait<T>::value_type coeff() {return 1.388845775764194516475674615393651421583e-3;}
    };
    
    template<class T>
    struct coeff_remez<T,7>{
        const static inline typename remez_trait<T>::value_type coeff() {return 1.984046086889422194165667837907363140900e-4;}
    };
    
    template<class T>
    struct coeff_remez<T,8>{
        const static inline typename remez_trait<T>::value_type coeff() {return 2.480796051103217906731895648542659799479e-5;}
    };
    
    template<class T>
    struct coeff_remez<T,9>{
        const static inline typename remez_trait<T>::value_type coeff() {return 2.757322471531216881986895460187391306101e-6;}
    };
    
    template<class T>
    struct coeff_remez<T,10>{
        const static inline typename remez_trait<T>::value_type coeff() {return 2.750681952065749952021552410237595651355e-7;}
    };
    
    template<class T>
    struct coeff_remez<T,11>{
        const static inline typename remez_trait<T>::value_type coeff() {return 2.491107214167301486491281008392345660825e-8;}
    };
    
    template<class T>
    struct coeff_remez<T,12>{
        const static inline typename remez_trait<T>::value_type coeff() {return 2.112283484698238418982379047902045324809e-9;}
    };
    
    template<class T>
    struct coeff_remez<T,13>{
        const static inline typename remez_trait<T>::value_type coeff() {return 1.674046551385629384718105982263728408780e-10;}
    };
    
    template<class T>
    struct coeff_remez<T,14>{
        const static inline typename remez_trait<T>::value_type coeff() {return 1.065051760640456276314390845111324719448e-11;}
    };

    template<class T>
    struct coeff_remez<T,15>{
        const static inline typename remez_trait<T>::value_type coeff() {return 5.767801724959751457731015384126272940732e-13;}
    };

    template<class T>
    struct coeff_remez<T,16>{
        const static inline typename remez_trait<T>::value_type coeff() {return 6.726031522165212579949644399840406478022e-14;}
    };
    
    template<class T>
    struct coeff_remez<T,17>{
        const static inline typename remez_trait<T>::value_type coeff() {return 5.602967881484105650356383854582921810441e-15;}
    };
    
    template<class T>
    struct coeff_remez<T,18>{
        const static inline typename remez_trait<T>::value_type coeff() {return -1.435505276273002687426295232138739718315e-16;}
    };
    
    template<class T>
    struct coeff_remez<T,19>{
        const static inline typename remez_trait<T>::value_type coeff() {return -8.357183503043118360680062676377597491270e-18;}
    };

    template<class T>
    struct coeff_remez<T,20>{
        const static inline typename remez_trait<T>::value_type coeff() {return 2.620576344671890578059306455830638184285e-18;}
    };
} //end namespace 

#endif 
