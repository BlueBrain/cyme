
/*
 * CoreBluron, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef COREBLURON_SIMD_VEC_HPP
#define COREBLURON_SIMD_VEC_HPP

namespace numeric{

    template<class T>
    struct vec{
        typedef typename simd_trait<T>::value_type value_type;
        typedef typename simd_trait<T>::pointer pointer;
        typedef typename simd_trait<T>::const_pointer const_pointer;
        typedef typename simd_trait<T>::register_type register_type;
      
        explicit vec(const value_type a){ xmm = _mm_load1<value_type>(xmm,a);}
        vec(const_pointer a){ xmm = _mm_load<value_type>(xmm,a);} 

        vec& operator *=(const vec& rhs){
            xmm = _mm_mul<value_type>(xmm,rhs.xmm);
            return *this;
        }
        
        vec& operator /=(const vec& rhs){
            xmm = _mm_div<value_type>(xmm,rhs.xmm);
            return *this;
        }
        
        vec& operator +=(const vec& rhs){
            xmm = _mm_add<value_type>(xmm,rhs.xmm);
            return *this;
        }

        inline void store(pointer a) const{
            _mm_store<value_type>(xmm,a);
        } 

        register_type xmm;
    };


    template<class T>
    vec<T> operator* (const vec<T>& lhs, const vec<T>& rhs){
        // named return value optimization
        vec<T> nrv(lhs);
        nrv *= rhs;
        return nrv;
    }

    template<class T>
    vec<T> operator* (int lhs, const vec<T>& rhs){
        vec<T> nrv(lhs);
        nrv *= rhs;
        return nrv;
    }

    template<class T>
    vec<T> operator/ (const vec<T>& lhs, const vec<T>& rhs){
        // named return value optimization
        vec<T> nrv(lhs);
        nrv /= rhs;
        return nrv;
    }

    template<class T>
    vec<T> operator/ (const vec<T>& lhs, const std::size_t rhs){
        // named return value optimization
        vec<T> nrv(lhs);
        vec<T> nv_rhs(rhs);
        nrv /= nv_rhs;
        return nrv;
    }
   
    template<class T>
    vec<T> operator+ (const vec<T>& lhs, const vec<T>& rhs){
        // named return value optimization
        vec<T> nrv(lhs);
        nrv += rhs;
        return nrv;
    }
} //end namespace

#endif

