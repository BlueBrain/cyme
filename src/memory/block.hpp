/*
 * CoreBluron, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#ifndef COREBLURON_BLOCK_HPP 
#define COREBLURON_BLOCK_HPP

#include "memory/detail/simd.h"
#include "memory/detail/array.hpp" // copy of boost::array + align
#include "memory/detail/storage.hpp"

namespace memory{



    // M = #element into the mechanism, N = #number of synapse, Order SoA or SoAoS
    // or M size of block, N number of block
    template<class T, std::size_t M, std::size_t N, memory::order O>
    class block{
    };

    template<class T, std::size_t M, std::size_t N>
    class block<T,M,N,AoS> : public boost::array<storage<T,M,AoS>,N> {
    public:
        typedef std::size_t                    size_type;
        typedef T                              value_type; 
        typedef value_type&                    reference;
        typedef const value_type&              const_reference;
        typedef storage<T,M,AoS>               storage_type;
        typedef boost::array<storage_type,N>   base_type; //default template seems impossible on partial specialization
        typedef typename  base_type::iterator  iterator;
       
        explicit block(){
            for(size_type i(0); i<N; ++i)
                base_type::operator[](i) = storage_type(); // fill up to 0
        }
        
        block(value_type value){
            for(size_type i(0); i<N; ++i)
                base_type::operator[](i) = storage_type(value); // fill up to value
        }

        inline reference operator()(size_type i, size_type j){
            BOOST_ASSERT_MSG( i < N, "out of range: block AoS i" );
            BOOST_ASSERT_MSG( j < M, "out of range: block AoS j" );
            return base_type::operator[](i)(j);
        }

        inline const_reference operator()(size_type i, size_type j) const{
            BOOST_ASSERT_MSG( i < N, "out of range: block AoS i" );
            BOOST_ASSERT_MSG( j < M, "out of range: block AoS j" );
            return base_type::operator[](i)(j);
        }

        static inline size_type number_block() {
            return N;
        }

        static inline size_type size_block() {
            return M;
        }
    };

    // N nombre de case, M nombre d element dans la case
    template<class T, std::size_t M, std::size_t N>
    class block<T,M,N,AoSoA> : public boost::array<storage<T,__GETSIMD__()/sizeof(T)*M,AoSoA>, N/(__GETSIMD__()/sizeof(T))+1>{
    public:
        typedef std::size_t                                               size_type;
        typedef T                                                         value_type;
        typedef value_type&                                               reference;
        typedef const value_type&                                         const_reference;
        typedef storage<T,__GETSIMD__()/sizeof(T)*M,AoSoA>                storage_type;
        typedef boost::array<storage_type,N/(__GETSIMD__()/sizeof(T))+1>  base_type; //default template seems impossible on partial specialization
        typedef typename  base_type::iterator                             iterator;

        explicit block(){
            for(size_type i(0); i<N/(__GETSIMD__()/sizeof(T))+1; ++i)
                base_type::operator[](i) = storage_type(); // fill up to 0
        }

        block(value_type value){
            for(size_type i(0); i<N/(__GETSIMD__()/sizeof(T))+1; ++i)
                base_type::operator[](i) = storage_type(value); // fill up to value
        }

        // Please tune me ! (does it exist a alternative to this ? ^_^
        inline reference operator()(size_type i, size_type j){
            BOOST_ASSERT_MSG( i < N, "out of range: block AoSoA i" );
            BOOST_ASSERT_MSG( j < M, "out of range: block AoSoA j" );
            return base_type::operator[]((i*M+j)/(M*__GETSIMD__()/sizeof(T)))                     //(i)
                                        (j*(__GETSIMD__()/sizeof(T)) + i%(__GETSIMD__()/sizeof(T)));  //(j)
        };

        // Please tune me ! (does it exist a alternative to this ? ^_^
        inline const_reference operator()(size_type i, size_type j) const{
            BOOST_ASSERT_MSG( i < N, "out of range: block AoSoA i" );
            BOOST_ASSERT_MSG( j < M, "out of range: block AoSoA j" );
            return base_type::operator[]((i*M+j)/(M*__GETSIMD__()/sizeof(T))) //(i)
                                        (j*(__GETSIMD__()/sizeof(T)) + i%(__GETSIMD__()/sizeof(T)));  //(j)
        };

        static inline size_type number_block() {
            return N;
        }

        static inline size_type size_block() {
            return M;
        }
    };
}

#endif
