/*
 * CoreBluron, License
 * 
 * Timothee Ewart - Swiss Federal Institute of technology in Lausanne 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef COREBLURON_STORAGE_HPP 
#define COREBLURON_STORAGE_HPP

namespace memory{
     /*! \class storage
         \brief This class modeles the basic storage, where the data are interleaved when the stride != 1 
     */
     template <class T, std::size_t Size>
     class storage{
         public:
         /**
         \brief typedef we are working with std notation
         */       
         typedef std::size_t       size_type;
         typedef T                 value_type; 
         typedef value_type&       reference;
         typedef const value_type& const_reference;

         /**
         \brief Default constructor, the storage is set up to 0
         */       
         storage();

         /**
         \brief Constructor, the storage is set up to the given value
         \param num value_type 
         */       
         explicit storage(value_type value);
 
         /**
         \fn reference operator[](size_type i)
         \brief Give write acces to the storage of memory 
         \param i unsigned 64-bit int
         */ 
         reference operator()(size_type i);

         /**
         \fn const_reference operator[](size_type i)
         \brief Give read acces to the storage of memory 
         \param i unsigned 64-bit int
         */ 
         const_reference operator()(size_type i) const;
             
         private:
         value_type data[Size];       
     };
} //end namespace

#include "memory/detail/storage.ipp"

#endif
