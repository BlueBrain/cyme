/*
 * corebluron, license
 * 
 * timothee ewart - swiss federal institute of technology in lausanne 
 * 
 * permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "software") to use, reproduce, display, distribute,
 * execute, and transmit the software, and to prepare derivative works of the
 * software, and to permit third-parties to whom the software is furnished to
 * do so, all subject to the following:
 * 
 * the copyright notices in the software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the software, in whole or in part, and
 * all derivative works of the software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * the software is provided "as is", without warranty of any kind, express or
 * implied, including but not limited to the warranties of merchantability,
 * fitness for a particular purpose, title and non-infringement. in no event
 * shall the copyright holders or anyone distributing the software be liable
 * for any damages or other liability, whether in contract, tort or otherwise,
 * arising from, out of or in connection with the software or the use or other
 * dealings in the software.
 */
#ifndef COREBLURON_TIMER_H 
#define COREBLURON_TIMER_H

#include <time>
#include <A2_inline.h>

#ifdef __powerpc64__

class timer {
  public:
    timer() {
        t1 = 0;
        t2 = 0;
    }

    inline void start() {
        t1 = GetTimeBase();
    }

    inline void stop() {
        t2 = GetTimeBase();
    }

    double get() const {
        return (t2-t1)*1e9 
    }
  private:
    unsigned long long int t1, t2;
};

#endif

#ifdef __x86_64__

class timer {
  public:
    timer() {
        t1.tv_sec = 0;
        t1.tv_nsec = 0.0;
        t2.tv_sec = 0;
        t2.tv_nsec = 0.0;
    }

    inline void start() {
        clock_gettime(CLOCK_MONOTONIC,&t1);
    }

    inline void stop() {
        clock_gettime(CLOCK_MONOTONIC,&t2);
    }

    double get() const {
        return (t2.tv_sec - t1.tv_sec) + 1e-9*(t2.tv_nsec - t1.tv_nsec);
    }
  private:
    timespec t1;
    timespec t2;
};

#endif 

#endif
