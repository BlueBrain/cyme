/*
 * CYME, license
 * 
 * timothee ewart - swiss federal institute of technology in lausanne 
 * 
 * permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "software") to use, reproduce, display, distribute,
 * execute, and transmit the software, and to prepare derivative works of the
 * software, and to permit third-parties to whom the software is furnished to
 * do so, all subject to the following:
 * 
 * the copyright notices in the software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the software, in whole or in part, and
 * all derivative works of the software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * the software is provided "as is", without warranty of any kind, express or
 * implied, including but not limited to the warranties of merchantability,
 * fitness for a particular purpose, title and non-infringement. in no event
 * shall the copyright holders or anyone distributing the software be liable
 * for any damages or other liability, whether in contract, tort or otherwise,
 * arising from, out of or in connection with the software or the use or other
 * dealings in the software.
 */
#ifndef CYME_TIMER_H 
#define CYME_TIMER_H

#include <time.h>

#ifdef __MACH__
#include <mach/clock.h>
#include <mach/mach.h>
#endif

#ifdef _ARCH_QP
//#include "utils/A2_inlines.h"

static __inline__ unsigned long long rdtsc(void) {
  unsigned long long int result=0;
  unsigned long int upper, lower,tmp;
  __asm__ volatile(
                "0:                  \n"
                "\tmftbu   %0           \n"
                "\tmftb    %1           \n"
                "\tmftbu   %2           \n"
                "\tcmpw    %2,%0        \n"
                "\tbne     0b         \n"
                : "=r"(upper),"=r"(lower),"=r"(tmp)
                );
  result = upper;
  result = result<<32;
  result = result|lower;

  return(result);
}
/*
class timer {
  public:
    timer() {
        t1 = 0;
        t2 = 0;
    }

    inline void start() {
        t1 = GetTimeBase();
    }

    inline void stop() {
        t2 = GetTimeBase();
    }

    double get() const {
        return (t2-t1)*1e9;
    }
  private:
    unsigned long long int t1, t2;
};
*/
#endif

#ifdef __x86_64__

static __inline__ unsigned long long rdtsc(void) {
  unsigned hi, lo;
  __asm__ __volatile__ ("rdtsc" : "=a"(lo), "=d"(hi));
  return ( (unsigned long long)lo)|( ((unsigned long long)hi)<<32 );
}


#ifdef __MACH__
#include <sys/time.h>
#define CLOCK_MONOTONIC 0 

int clock_gettime(int /*clk_id*/, struct timespec* t) {
    struct timeval now;
    int rv = gettimeofday(&now, NULL);
    if (rv) return rv;
    t->tv_sec  = now.tv_sec;
    t->tv_nsec = now.tv_usec * 1000;
    return 0;
}
#endif

class timer {
  public:
    timer() {
        t1.tv_sec = 0;
        t1.tv_nsec = 0.0;
        t2.tv_sec = 0;
        t2.tv_nsec = 0.0;
    }

    inline void start() {
        clock_gettime(CLOCK_MONOTONIC,&t1);
    }

    inline void stop() {
        clock_gettime(CLOCK_MONOTONIC,&t2);
    }

    double get() const {
        return (t2.tv_sec - t1.tv_sec) + 1e-9*(t2.tv_nsec - t1.tv_nsec);
    }
  private:
    timespec t1;
    timespec t2;
};
#endif 

#endif
